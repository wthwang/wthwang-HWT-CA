<%@page import="com.companyimgtab.TDto"%>
<%@page import="com.companyimgtab.TList"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"  pageEncoding="UTF-8"%>
    
    <div class="container">
		<div class="row"><br><br>
		 	<img src="<%=request.getContextPath()%>/images/msa2.jpg" width="900" height="500" alt="images" >
			<p class="a">  </p>
			<p style="font-size:22px; font-weight: bold;">1) 프로젝트 선정 배경 및 목적, 요인<br></p>
 			<p style="font-size:18px; ">
			 요즘과 같은 스마트 IT시대에 많은 양의 데이터 사용으로 인하여 많은 양의 트래픽이 발생한다. 
			 그로 인해 많은 특정 사이트에 특정 시간, 특정 일이 될 경우 평소보다 많은 양의 트래픽이 발생하여 서버의 마비 또는 과부하가 걸려 사용자가 사이트를 이용하지 못하는 경우가 발생한다.<br>
			 
			 
			기존 모놀리식 구조는 개발 초기에 단순한 아키텍처 구조를 나타내므로, 구축이 ㅌ쉬우며 개발 환경이 같아서 복잡하지 않다는 장점을 가지고 있다 하지만 <br>
			<img src="<%=request.getContextPath()%>/images/1.JPG" width="900" height="300" alt="images" > <br>
			 <그림>과 같이 접속자 수가 폭주하면 하나의 서비스로 묶여있어 서버가 재 기능을 작동하지 못하면 전체적인 서비스가 마비되므로 결과적으로 전체 서비스를 사용이 불가능 하다는 큰 단점을 나타낸다.<br><br>
			 
			 MSA(Micro service Architecture)를 구성하여 전체 서비스를 여러 개의 서비스로 잘게 쪼개어 구성한다면 특정 시간대에 동시 접속자가 발생하여 특성 서비스를 이용하더라도 서버에서 특성 서비스를 상대로 과부하가 진행되어있는 상황에서 다른 서비스에 관련하여 사용이 가능하다는 특징을 나타내고 있으며 MSA의 특징을 이용하여 서버에 사용되는 시스템의 자유자재로 증설시켜 한 서버에 집중되었던 트래픽의 양의 여러 곳에 시스템에 분산되어 서버의 마비와 과부하를 줄일 수 있을 것이다.<br> 
			 이를 통해 서버를 사용하는 사용자들이 사이트에 접속하지 못하는 상황이 사라질 것이며, 더욱 편안하게 인터넷 사용을 할 것이다.<br>
			
			 이에 우리는 네이버, 쿠팡, 넷 플릭스 등 다양한 회사에서 사용하는 MSA 사용에 주목을 하였으며 MSA에 가장 큰 장점은 단일 서비스를 작은 서비스로 나뉘어 세분화된 서비스를 제공한다는 점이다.<br>
			 이러한 이점을 사용할 경우 유지보수에 최적화 되어있으며 서비스별로 플랫폼에 대한 기술 도입 및 확장이 자유로워진다. 또한 사용자 관점에서 서비스별 사용 제한 요소가 줄어든다. <br>	<br> <br>
						
			<img src="<%=request.getContextPath()%>/images/2.JPG" width="1000" height="500" alt="images" ><br><br>
			 위 그림과 같이 MSA를 사용할 경우 각 서비스 별로 팀이 세분화 되어 있어 유지보수 및 관리를 하기 좋으며 한 곳이 마비되더라도 다른 서비스를 사용할 수 있으며 CI/CD 과정 진행 중 분리된 서비스를 사용자가 이용 가능하다. <br><br>
			 이에 따라 다른 환경에서 적용시킬 수 있는 두 가지 방법의 MSA 구조 방법을 사용하여 두 가지를 비교할 것이다.   
			 우선 두 가지 방법으로는 VM기반 MSA, 컨테이너 기반 MSA 사용할 것이며, 이 두 방법에 성능에 대하여 비교해 볼 것이다. <br><br>
			 우선 VM 기술은 호스트 PC와는 별개의 운영체제를 사용할 수 있기에 환경에 좌지우지 되지 않고 서비스하고자 하는 기능들을 추가하거나 운용할 수 있다. 
			 또한 VM별로 독립된 가상의 자원을 할당받기 때문에 논리적 분리로 인하여 오류가 발생하여도 다른 VM으로 확산되지 않는다는 장점을 가진다. 
			 그러나 완전한 운영체제가 설치되기 때문에 대량의 메모리가 필요하며 CPU 성능 확보에 대하여 CPU 자원에 대한 경쟁이 발생하게 되기 때문에 자원 확보가 싶지 않다는 즉 성능저하의 원인이 발생할 수 있는 단점이 존재한다.<br><br> 
			  컨테이너 기술의 경우 가상머신의 생성 없이 호스트 운영체제에 애플리케이션 사용이 가능하며 컨테이너 기술에 있어서 가장 부각되는 장점으로는 부팅이 빠르며 가상머신에 비해 컨테이너 서비스 부팅 시간은 비교할 수 없을 정도로 차이가 난다.<br>
			  또한, 메모리 사용량이 적다 이는 컨테이너 게스트 운영체제를 띄우지 않기 때문에 애플리케이션과 애플리케이션이 수행할 때 필요로 하는 라이브러리, 환경 구성 정도의 추가 메모리를 소모할 뿐이다.<br>
			  반면, 단점에 있어서는 자원의 격리와 커터 제한이 어렵다는 점과 호스트 운영체제에 실행 환경이 묶인다는 점이 있어 우리는 각각의 다른 환경에서 MSA 방식의 웹을 구축하여 서비스를 제공하면서 각 각의 장단점에 대하여 성능을 비교할 예정이다. <br><br><br>
			 
			 <p style="font-size:22px; font-weight: bold;">2) 프로젝트 인프라 구성도<br></br></p>
			 <img src="<%=request.getContextPath()%>/images/openstakinpree.jpg" width="1000" height="500" alt="images" >
			<img src="<%=request.getContextPath()%>/images/image01.jpg" width="1000" height="500" alt="images" ><br><br>
			<p style="font-size:18px; ">
			<그림>을 보면 사용자는 API Gateway까지만 접근한다. API Gateway 뒤로 연결된 서비스로 접속하기 위해서는 오로지 API Gateway를 통해서만 접근이 가능하다.<br> 
			E-Mail 기능을 호출할 경우, API Gateway는 E-Mail 서비스가 올라와있는 Load Balancer IP로 접근하고 E-Mail 서비스에 접근을 할 수 있는 사용자인지 E-Mail 서비스의 데이터베이스를 통해 확인한다.<br>
			 접근이 허용된 사용자라면 E-Mail 서비스를 호출하고 그렇지 않을 경우에는 API Gateway에서 다른 서비스로 이동하지 않는다.  마찬가지로 다른 기능들 역시 권한을 확인하고 권한이 존재하면 호출을 실시하고 그렇지 않다면 API Gateway에서 이동하지 않는다.<br>
			부하분산 측면에서 각 서비스는 오케스트레이션을 실시한다. Load Balancer IP로 접근하는 트래픽이 일정 부분 초과하면 새로운 컨테이너(OpenStack 인프라 구축 시 VM)를 생성하고 다시 잠잠해지면 자원 확보를 위해서 최소 1개까지 컨테이너(OpenStack 인프라 구축 시 VM)를 축소시킨다.<br><br><br><br>
			
			
		</div> 
    </div> 
    
    
     <script>
     
    </script> 